// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionManager.Infrastructure.Persistence;

#nullable disable

namespace ProductionManager.Infrastructure.Migrations
{
    [DbContext(typeof(ProductionManagerContext))]
    partial class ProductionManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProductionManager.Domain.Entities.AmplifierBoard", b =>
                {
                    b.Property<int>("AmplifierBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("BlackValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("GreenValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("HasBlack")
                        .HasColumnType("int");

                    b.Property<int>("HasGreen")
                        .HasColumnType("int");

                    b.Property<int>("HasRed")
                        .HasColumnType("int");

                    b.Property<int>("HasShield")
                        .HasColumnType("int");

                    b.Property<int>("HasWhite")
                        .HasColumnType("int");

                    b.Property<string>("RedValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ShieldValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("WhiteValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("AmplifierBoardId", "Name");

                    b.ToTable("AmplifierBoards");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.DefectType", b =>
                {
                    b.Property<string>("DefectName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Stage")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DefectDescription")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinTotalProductInBatchB4Trigger")
                        .HasColumnType("int");

                    b.Property<decimal>("TriggerPercentage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("DefectName", "Stage");

                    b.HasIndex("Stage");

                    b.ToTable("DefectTypes");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.DefectTypeSolution", b =>
                {
                    b.Property<string>("DefectName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Stage")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasMaxLength(264)
                        .HasColumnType("varchar(264)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("DefectName", "Stage", "Timestamp");

                    b.ToTable("DefectTypeSolutions");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.LogDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("LogSummaryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "LogSummaryId");

                    b.HasIndex("LogSummaryId");

                    b.ToTable("LogDetails");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.LogSummary", b =>
                {
                    b.Property<Guid>("LogSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NoOfItemsProcessed")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("LogSummaryId");

                    b.ToTable("LogSummarys");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ModelVersion", b =>
                {
                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("AccuracyClass")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Alloy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CCNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultCableLength")
                        .HasColumnType("int");

                    b.Property<string>("DefaultTestingMode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MinimumDeadLoad")
                        .HasColumnType("int");

                    b.Property<string>("ModelVersionGroupName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ModelVersionName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("NTEPCertificationId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime?>("NTEPCertificationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("NominalOutput")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("NominalOutputPercentage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("NonlinearityPercentage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("NumberOfGauges")
                        .HasColumnType("int");

                    b.Property<string>("OIMLCertificationId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime?>("OIMLCertificationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Resistance")
                        .HasColumnType("int");

                    b.Property<int?>("SafeLoad")
                        .HasColumnType("int");

                    b.Property<string>("ShellMaterialName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("TemperingHardnessHigh")
                        .HasColumnType("int");

                    b.Property<int?>("TemperingHardnessLow")
                        .HasColumnType("int");

                    b.Property<bool>("TestPointDirection")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UltimateLoad")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("VersionDescription")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("nMax")
                        .HasColumnType("int");

                    b.Property<decimal>("vMin")
                        .HasPrecision(11, 1)
                        .HasColumnType("decimal(11,1)");

                    b.HasKey("ModelVersionId", "ModelName");

                    b.ToTable("ModelVersions");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.NonConformanceLog", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("WhenItOccurred")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BatcNo")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DefectName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LogByUserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ResolvedByUserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("WhenItWasResolved")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProductId", "ModelVersionId", "Stage", "WhenItOccurred");

                    b.ToTable("NonConformanceLogs");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BatcNo")
                        .HasColumnType("int");

                    b.Property<int>("CableLength")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("DefaultTestingMode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InspectionResult")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("LoadDirection")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("MachiningPurcharseOrderNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ModelTypeGroupName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("ProductStageStage")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SalesOrderId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SteelPurcharseOrderNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SubStage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ThermexPurcharseOrderNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UsedTestingMode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductStageStage");

                    b.HasIndex("ModelVersionId", "ModelName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductAdditionalInfo", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CableLenght")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CableLenghtUnit")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("InputVoltage")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProductAdditionalInfoId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("ProductAdditionalInfos");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCablingEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductCablingEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCertificate", b =>
                {
                    b.Property<int>("ProductCertificateId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CertifcateType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("varchar(2500)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProductCertificateId", "ProductId");

                    b.HasIndex("CertifcateType");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCertificates");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCertificateType", b =>
                {
                    b.Property<string>("CertifcateType")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("CertifcateType");

                    b.ToTable("ProductCertificateTypes");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinalUnit", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<int>("GradSize")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("HighWeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)");

                    b.Property<int>("IndicatorChannel")
                        .HasColumnType("int");

                    b.Property<string>("IndicatorSerialNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("IndicatorType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("InputUnit")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("LowWeight")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("OuputUnits")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("PinSize")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductFinalUnits");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinalVerifiationEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CalibratedOutput")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutZeroPoint")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("PercentNonlinearity")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("RefPoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ReferenceSerial")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TesterName")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("VerificationResult")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TimeStamp");

                    b.HasIndex("TesterName");

                    b.ToTable("ProductFinalVerifiationEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinishedEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductFinishedEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductGaugeEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GuageLotNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("GuageModel")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductGaugeEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductGaugeInspectionEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefectName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("GaugeFailed")
                        .HasColumnType("int");

                    b.Property<int>("GaugePassed")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InspectionResult")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductGaugeInspectionEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInitialUnit", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InputUnits")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("OutputUnits")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductInitialUnits");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInitialVerificationEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CalibratedOutput")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutPoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DutZeroPoint")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ForcePoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("PercentNonlinearity")
                        .HasPrecision(36, 12)
                        .HasColumnType("decimal(36,12)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("RefPoint1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint10")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint5")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint6")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint7")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint8")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RefPoint9")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ReferenceSerial")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TesterName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("VerificationResult")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TimeStamp");

                    b.HasIndex("TesterName");

                    b.ToTable("ProductInitialVerificationEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInventoryEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductInventoryEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductLabellingEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductLabellingEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductMovingEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DestinationStage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MovingNotes")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SourceStage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductMovingEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductPicture", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BasePath")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LocalPathName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "Timestamp");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductReceptionEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductReceptionEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductResistorInstallationEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductResistorInstallationEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductSealingEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductSealingEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductShippingEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductShippingEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductStage", b =>
                {
                    b.Property<string>("Stage")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SaveAndEndBarCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SaveBarCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("StageBarcode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("StageDescription")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<int>("StageNo")
                        .HasColumnType("int");

                    b.HasKey("Stage");

                    b.ToTable("ProductStages");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductSurfacePreparationEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefectName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("InspectionResult")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductSurfacePreparationEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductVersionChangedEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentPrevModelName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PrevModelName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("PrevModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductVersionChangedEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductWiringEvent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("ProductId", "TimeStamp");

                    b.ToTable("ProductWiringEvents");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ReferenceCellCalibration", b =>
                {
                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("HighCurrent")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<decimal>("HighMeasuredPosition")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<decimal>("LowCurrent")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<decimal>("LowMeasuredPosition")
                        .HasPrecision(30, 10)
                        .HasColumnType("decimal(30,10)");

                    b.Property<string>("RefStandardManufacturer")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardModelName")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardSerialNo")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Weight");

                    b.HasIndex("RefStandardManufacturer", "RefStandardModelName", "RefStandardSerialNo");

                    b.ToTable("ReferenceCellCalibrations");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ReferenceStandard", b =>
                {
                    b.Property<string>("RefStandardManufacturer")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardModelName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardSerialNo")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("B0")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("B1")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("B2")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("B3")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("B4")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RefStandardManufacturer", "RefStandardModelName", "RefStandardSerialNo");

                    b.ToTable("ReferenceStandards");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ShuntResistor", b =>
                {
                    b.Property<decimal>("Value")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("Value");

                    b.ToTable("ShuntResistors");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Test", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RefStandardSerialNo")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardManufacturer")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RefStandardModelName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("ExcitationResistance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("SignalResistance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Timestamp", "ProductId", "RefStandardSerialNo", "RefStandardManufacturer", "RefStandardModelName");

                    b.HasIndex("ProductId");

                    b.HasIndex("RefStandardSerialNo", "RefStandardManufacturer", "RefStandardModelName");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Tester", b =>
                {
                    b.Property<string>("TesterName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NistTraceAble")
                        .HasColumnType("int");

                    b.HasKey("TesterName");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.TrimmingResistor", b =>
                {
                    b.Property<decimal>("Value")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("Value");

                    b.ToTable("TrimmingResistors");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.DefectType", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.ProductStage", "ProductStage")
                        .WithMany("DefectTypes")
                        .HasForeignKey("Stage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductStage");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.DefectTypeSolution", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.DefectType", "DefectType")
                        .WithMany("DefectTypeSolutions")
                        .HasForeignKey("DefectName", "Stage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefectType");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.LogDetail", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.LogSummary", "LogSummary")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogSummary");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.NonConformanceLog", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("NonConformanceLogs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.ProductStage", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductStageStage");

                    b.HasOne("ProductionManager.Domain.Entities.ModelVersion", "ModelVersion")
                        .WithMany("Products")
                        .HasForeignKey("ModelVersionId", "ModelName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelVersion");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCablingEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCertificate", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.ProductCertificateType", "ProductCertificateType")
                        .WithMany("ProductCertificates")
                        .HasForeignKey("CertifcateType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("ProductCertificates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCertificateType");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinalUnit", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("ProductFinalUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinalVerifiationEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionManager.Domain.Entities.Tester", "Tester")
                        .WithMany("ProductFinalVerifiationEvents")
                        .HasForeignKey("TesterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductFinishedEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductGaugeEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductGaugeInspectionEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInitialUnit", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("ProductInitialUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInitialVerificationEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionManager.Domain.Entities.Tester", "Tester")
                        .WithMany("ProductInitialVerificationEvents")
                        .HasForeignKey("TesterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductInventoryEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductLabellingEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductMovingEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductPicture", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductReceptionEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductResistorInstallationEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductSealingEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductShippingEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductSurfacePreparationEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductVersionChangedEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductWiringEvent", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ReferenceCellCalibration", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.ReferenceStandard", "ReferenceStandard")
                        .WithMany("ReferenceCellCalibrations")
                        .HasForeignKey("RefStandardManufacturer", "RefStandardModelName", "RefStandardSerialNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferenceStandard");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Test", b =>
                {
                    b.HasOne("ProductionManager.Domain.Entities.Product", "Product")
                        .WithMany("Tests")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionManager.Domain.Entities.ReferenceStandard", "ReferenceStandard")
                        .WithMany("Tests")
                        .HasForeignKey("RefStandardSerialNo", "RefStandardManufacturer", "RefStandardModelName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ReferenceStandard");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.DefectType", b =>
                {
                    b.Navigation("DefectTypeSolutions");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.LogSummary", b =>
                {
                    b.Navigation("LogDetails");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ModelVersion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Product", b =>
                {
                    b.Navigation("NonConformanceLogs");

                    b.Navigation("ProductCertificates");

                    b.Navigation("ProductFinalUnits");

                    b.Navigation("ProductInitialUnits");

                    b.Navigation("ProductPictures");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductCertificateType", b =>
                {
                    b.Navigation("ProductCertificates");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ProductStage", b =>
                {
                    b.Navigation("DefectTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.ReferenceStandard", b =>
                {
                    b.Navigation("ReferenceCellCalibrations");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ProductionManager.Domain.Entities.Tester", b =>
                {
                    b.Navigation("ProductFinalVerifiationEvents");

                    b.Navigation("ProductInitialVerificationEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
